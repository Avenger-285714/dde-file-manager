/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c VaultManagerInterface -p dbus_interface/vaultmanagerdbus_interface vaultmanagerdbus.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef VAULTMANAGERDBUS_INTERFACE_H
#define VAULTMANAGERDBUS_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.filemanager.service.VaultManager
 */
class VaultManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.filemanager.service.VaultManager"; }

public:
    VaultManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~VaultManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ClearLockEvent()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ClearLockEvent"), argumentList);
    }

    inline QDBusPendingReply<> ComputerSleep(bool bSleep)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(bSleep);
        return asyncCallWithArgumentList(QStringLiteral("ComputerSleep"), argumentList);
    }

    inline QDBusPendingReply<qulonglong> GetLastestTime()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetLastestTime"), argumentList);
    }

    inline QDBusPendingReply<int> GetLeftoverErrorInputTimes(int userID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(userID);
        return asyncCallWithArgumentList(QStringLiteral("GetLeftoverErrorInputTimes"), argumentList);
    }

    inline QDBusPendingReply<int> GetNeedWaitMinutes(int userID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(userID);
        return asyncCallWithArgumentList(QStringLiteral("GetNeedWaitMinutes"), argumentList);
    }

    inline QDBusPendingReply<qulonglong> GetSelfTime()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetSelfTime"), argumentList);
    }

    inline QDBusPendingReply<bool> IsLockEventTriggered()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("IsLockEventTriggered"), argumentList);
    }

    inline QDBusPendingReply<> LeftoverErrorInputTimesMinusOne(int userID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(userID);
        return asyncCallWithArgumentList(QStringLiteral("LeftoverErrorInputTimesMinusOne"), argumentList);
    }

    inline QDBusPendingReply<> RestoreLeftoverErrorInputTimes(int userID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(userID);
        return asyncCallWithArgumentList(QStringLiteral("RestoreLeftoverErrorInputTimes"), argumentList);
    }

    inline QDBusPendingReply<> RestoreNeedWaitMinutes(int userID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(userID);
        return asyncCallWithArgumentList(QStringLiteral("RestoreNeedWaitMinutes"), argumentList);
    }

    inline QDBusPendingReply<> SetRefreshTime(qulonglong time)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(time);
        return asyncCallWithArgumentList(QStringLiteral("SetRefreshTime"), argumentList);
    }

    inline QDBusPendingReply<> StartTimerOfRestorePasswordInput(int userID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(userID);
        return asyncCallWithArgumentList(QStringLiteral("StartTimerOfRestorePasswordInput"), argumentList);
    }

    inline QDBusPendingReply<> SysUserChanged(const QString &curUser)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(curUser);
        return asyncCallWithArgumentList(QStringLiteral("SysUserChanged"), argumentList);
    }

    inline QDBusPendingReply<> TriggerLockEvent()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("TriggerLockEvent"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void lockEventTriggered(const QString &user);
};

namespace com {
  namespace deepin {
    namespace filemanager {
      namespace service {
        typedef ::VaultManagerInterface VaultManager;
      }
    }
  }
}
namespace local {
  typedef ::VaultManagerInterface VaultClock;
}
#endif

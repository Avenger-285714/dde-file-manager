/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c OperationsStackManagerInterface -p dbus_interface/operationsstackmanagerdbus_interface operationsstackmanagerdbus.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OPERATIONSSTACKMANAGERDBUS_INTERFACE_H
#define OPERATIONSSTACKMANAGERDBUS_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.deepin.filemanager.service.OperationsStackManager
 */
class OperationsStackManagerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.filemanager.service.OperationsStackManager"; }

public:
    OperationsStackManagerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OperationsStackManagerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> CleanOperations()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CleanOperations"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> RevocationOperations()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RevocationOperations"), argumentList);
    }

    inline QDBusPendingReply<> SaveOperations(const QVariantMap &values)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(values);
        return asyncCallWithArgumentList(QStringLiteral("SaveOperations"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace deepin {
    namespace filemanager {
      namespace service {
        typedef ::OperationsStackManagerInterface OperationsStackManager;
      }
    }
  }
}
#endif

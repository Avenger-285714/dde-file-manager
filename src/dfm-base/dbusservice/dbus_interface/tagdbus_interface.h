/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c Tag -p ./tagdbus_interface ../org.deepin.filemanager.tag.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef TAGDBUS_INTERFACE_H
#define TAGDBUS_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface local.TagDBus
 */
class Tag: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "local.TagDBus"; }

public:
    Tag(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~Tag();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> CanTagFile(const QString &filePath)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filePath);
        return asyncCallWithArgumentList(QStringLiteral("CanTagFile"), argumentList);
    }

    inline QDBusPendingReply<bool> Delete(uchar type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("Delete"), argumentList);
    }

    inline QDBusPendingReply<bool> Delete(uchar type, const QVariantMap &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("Delete"), argumentList);
    }

    inline QDBusPendingReply<bool> Insert(uchar type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("Insert"), argumentList);
    }

    inline QDBusPendingReply<bool> Insert(uchar type, const QVariantMap &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("Insert"), argumentList);
    }

    inline QDBusPendingReply<QString> LastError()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("LastError"), argumentList);
    }

    inline QDBusPendingReply<bool> Update(uchar type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("Update"), argumentList);
    }

    inline QDBusPendingReply<bool> Update(uchar type, const QVariantMap &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("Update"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace local {
  typedef ::Tag TagDBus;
}
#endif

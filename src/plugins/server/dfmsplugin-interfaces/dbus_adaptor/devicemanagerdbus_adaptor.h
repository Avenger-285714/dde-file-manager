/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i ../../plugins/server/dfmsplugin-interfaces/devicemanagerdbus.h -c DeviceManagerAdaptor -l DeviceManagerDBus -a ../../plugins/server/dfmsplugin-interfaces/dbus_adaptor/devicemanagerdbus_adaptor devicemanagerdbus.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef DEVICEMANAGERDBUS_ADAPTOR_H
#define DEVICEMANAGERDBUS_ADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "../../plugins/server/dfmsplugin-interfaces/devicemanagerdbus.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.filemanager.service.DeviceManager
 */
class DeviceManagerAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.filemanager.service.DeviceManager")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.filemanager.service.DeviceManager\">\n"
"    <signal name=\"AskStopSacnningWhenUnmount\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"AskStopScanningWhenDetach\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"AskStopScanningWhenDetachAll\"/>\n"
"    <signal name=\"SizeUsedChanged\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"out\" type=\"x\" name=\"total\"/>\n"
"      <arg direction=\"out\" type=\"x\" name=\"free\"/>\n"
"    </signal>\n"
"    <signal name=\"NotifyDeviceBusy\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"action\"/>\n"
"    </signal>\n"
"    <signal name=\"BlockDriveAdded\"/>\n"
"    <signal name=\"BlockDriveRemoved\"/>\n"
"    <signal name=\"BlockDeviceAdded\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"BlockDeviceRemoved\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"BlockDeviceFilesystemAdded\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"BlockDeviceFilesystemRemoved\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"BlockDeviceMounted\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"mountPoint\"/>\n"
"    </signal>\n"
"    <signal name=\"BlockDeviceUnmounted\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"BlockDevicePropertyChanged\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"property\"/>\n"
"      <arg direction=\"out\" type=\"v\" name=\"value\"/>\n"
"    </signal>\n"
"    <signal name=\"BlockDeviceUnlocked\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"clearDeviceId\"/>\n"
"    </signal>\n"
"    <signal name=\"BlockDeviceLocked\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"ProtocolDeviceAdded\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"ProtocolDeviceRemoved\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <signal name=\"ProtocolDeviceMounted\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"mountPoint\"/>\n"
"    </signal>\n"
"    <signal name=\"ProtocolDeviceUnmounted\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"    <method name=\"IsMonotorWorking\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"SafelyRemoveBlockDevice\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"DetachBlockDevice\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"DetachBlockDeviceForced\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"DetachProtocolDevice\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"DetachAllMountedDevices\"/>\n"
"    <method name=\"DetachAllMountedDevicesForced\"/>\n"
"    <method name=\"MountBlockDevice\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"UnmountBlockDevice\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"UnmountBlockDeviceForced\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"EjectBlockDevice\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"PoweroffBlockDevice\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"MountProtocolDevice\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"UnmountProtocolDevice\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"UnlockBlockDevice\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"passwd\"/>\n"
"    </method>\n"
"    <method name=\"LockBlockDevice\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"    </method>\n"
"    <method name=\"MountNetworkDevice\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"address\"/>\n"
"      <arg direction=\"in\" type=\"b\" name=\"anonymous\"/>\n"
"      <arg direction=\"in\" type=\"a{sv}\" name=\"opts\"/>\n"
"      <annotation value=\"QVariantMap\" name=\"org.qtproject.QtDBus.QtTypeName.In2\"/>\n"
"    </method>\n"
"    <method name=\"GetBlockDevicesIdList\">\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"      <arg direction=\"in\" type=\"a{sv}\" name=\"opts\"/>\n"
"      <annotation value=\"QVariantMap\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"    </method>\n"
"    <method name=\"QueryBlockDeviceInfo\">\n"
"      <arg direction=\"out\" type=\"a{sv}\"/>\n"
"      <annotation value=\"QVariantMap\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"in\" type=\"b\" name=\"detail\"/>\n"
"    </method>\n"
"    <method name=\"GetProtocolDevicesIdList\">\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"QueryProtocolDeviceInfo\">\n"
"      <arg direction=\"out\" type=\"a{sv}\"/>\n"
"      <annotation value=\"QVariantMap\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"in\" type=\"b\" name=\"detail\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    DeviceManagerAdaptor(DeviceManagerDBus *parent);
    virtual ~DeviceManagerAdaptor();

    inline DeviceManagerDBus *parent() const
    { return static_cast<DeviceManagerDBus *>(QObject::parent()); }

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void DetachAllMountedDevices();
    void DetachAllMountedDevicesForced();
    void DetachBlockDevice(const QString &id);
    void DetachBlockDeviceForced(const QString &id);
    void DetachProtocolDevice(const QString &id);
    void EjectBlockDevice(const QString &id);
    QStringList GetBlockDevicesIdList(const QVariantMap &opts);
    QStringList GetProtocolDevicesIdList();
    bool IsMonotorWorking();
    void LockBlockDevice(const QString &id);
    QString MountBlockDevice(const QString &id);
    void MountNetworkDevice(const QString &address, bool anonymous, const QVariantMap &opts);
    QString MountProtocolDevice(const QString &id);
    void PoweroffBlockDevice(const QString &id);
    QVariantMap QueryBlockDeviceInfo(const QString &id, bool detail);
    QVariantMap QueryProtocolDeviceInfo(const QString &id, bool detail);
    void SafelyRemoveBlockDevice(const QString &id);
    QString UnlockBlockDevice(const QString &id, const QString &passwd);
    void UnmountBlockDevice(const QString &id);
    void UnmountBlockDeviceForced(const QString &id);
    void UnmountProtocolDevice(const QString &id);
Q_SIGNALS: // SIGNALS
    void AskStopSacnningWhenUnmount(const QString &id);
    void AskStopScanningWhenDetach(const QString &id);
    void AskStopScanningWhenDetachAll();
    void BlockDeviceAdded(const QString &id);
    void BlockDeviceFilesystemAdded(const QString &id);
    void BlockDeviceFilesystemRemoved(const QString &id);
    void BlockDeviceLocked(const QString &id);
    void BlockDeviceMounted(const QString &id, const QString &mountPoint);
    void BlockDevicePropertyChanged(const QString &id, const QString &property, const QDBusVariant &value);
    void BlockDeviceRemoved(const QString &id);
    void BlockDeviceUnlocked(const QString &id, const QString &clearDeviceId);
    void BlockDeviceUnmounted(const QString &id);
    void BlockDriveAdded();
    void BlockDriveRemoved();
    void NotifyDeviceBusy(int action);
    void ProtocolDeviceAdded(const QString &id);
    void ProtocolDeviceMounted(const QString &id, const QString &mountPoint);
    void ProtocolDeviceRemoved(const QString &id);
    void ProtocolDeviceUnmounted(const QString &id);
    void SizeUsedChanged(const QString &id, qlonglong total, qlonglong free);
};

#endif

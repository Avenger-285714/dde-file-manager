/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ../../../../../dfm-base/dbusservice/org.deepin.filemanager.tag.xml -i ../tagdbus.h -a tagdbus_adaptor
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "tagdbus_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class TagDBusAdaptor
 */

TagDBusAdaptor::TagDBusAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

TagDBusAdaptor::~TagDBusAdaptor()
{
    // destructor
}

bool TagDBusAdaptor::CanTagFile(const QString &filePath)
{
    // handle method call local.TagDBus.CanTagFile
    bool out0;
    QMetaObject::invokeMethod(parent(), "CanTagFile", Q_RETURN_ARG(bool, out0), Q_ARG(QString, filePath));
    return out0;
}

bool TagDBusAdaptor::Delete(uchar type)
{
    // handle method call local.TagDBus.Delete
    bool out0;
    QMetaObject::invokeMethod(parent(), "Delete", Q_RETURN_ARG(bool, out0), Q_ARG(uchar, type));
    return out0;
}

bool TagDBusAdaptor::Delete(uchar type, const QVariantMap &value)
{
    // handle method call local.TagDBus.Delete
    bool out0;
    QMetaObject::invokeMethod(parent(), "Delete", Q_RETURN_ARG(bool, out0), Q_ARG(uchar, type), Q_ARG(QVariantMap, value));
    return out0;
}

bool TagDBusAdaptor::Insert(uchar type)
{
    // handle method call local.TagDBus.Insert
    bool out0;
    QMetaObject::invokeMethod(parent(), "Insert", Q_RETURN_ARG(bool, out0), Q_ARG(uchar, type));
    return out0;
}

bool TagDBusAdaptor::Insert(uchar type, const QVariantMap &value)
{
    // handle method call local.TagDBus.Insert
    bool out0;
    QMetaObject::invokeMethod(parent(), "Insert", Q_RETURN_ARG(bool, out0), Q_ARG(uchar, type), Q_ARG(QVariantMap, value));
    return out0;
}

QString TagDBusAdaptor::LastError()
{
    // handle method call local.TagDBus.LastError
    QString out0;
    QMetaObject::invokeMethod(parent(), "LastError", Q_RETURN_ARG(QString, out0));
    return out0;
}

bool TagDBusAdaptor::Update(uchar type)
{
    // handle method call local.TagDBus.Update
    bool out0;
    QMetaObject::invokeMethod(parent(), "Update", Q_RETURN_ARG(bool, out0), Q_ARG(uchar, type));
    return out0;
}

bool TagDBusAdaptor::Update(uchar type, const QVariantMap &value)
{
    // handle method call local.TagDBus.Update
    bool out0;
    QMetaObject::invokeMethod(parent(), "Update", Q_RETURN_ARG(bool, out0), Q_ARG(uchar, type), Q_ARG(QVariantMap, value));
    return out0;
}


/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i ../../plugins/desktop/ddplugin-dbusregister/devicemanagerdbus.h -c DeviceManagerAdaptor -l DeviceManagerDBus -a ../../plugins/desktop/ddplugin-dbusregister/dbus_adaptor/devicemanagerdbus_adaptor devicemanagerdbus.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "../../plugins/desktop/ddplugin-dbusregister/dbus_adaptor/devicemanagerdbus_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class DeviceManagerAdaptor
 */

DeviceManagerAdaptor::DeviceManagerAdaptor(DeviceManagerDBus *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

DeviceManagerAdaptor::~DeviceManagerAdaptor()
{
    // destructor
}

bool DeviceManagerAdaptor::DetachAllMountedDevices()
{
    // handle method call com.deepin.filemanager.service.DeviceManager.DetachAllMountedDevices
    return parent()->DetachAllMountedDevices();
}

bool DeviceManagerAdaptor::DetachAllMountedDevicesForced()
{
    // handle method call com.deepin.filemanager.service.DeviceManager.DetachAllMountedDevicesForced
    return parent()->DetachAllMountedDevicesForced();
}

bool DeviceManagerAdaptor::DetachBlockDevice(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.DetachBlockDevice
    return parent()->DetachBlockDevice(id);
}

bool DeviceManagerAdaptor::DetachBlockDeviceForced(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.DetachBlockDeviceForced
    return parent()->DetachBlockDeviceForced(id);
}

bool DeviceManagerAdaptor::DetachProtocolDevice(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.DetachProtocolDevice
    return parent()->DetachProtocolDevice(id);
}

void DeviceManagerAdaptor::EjectBlockDevice(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.EjectBlockDevice
    parent()->EjectBlockDevice(id);
}

QStringList DeviceManagerAdaptor::GetBlockDevicesIdList(const QVariantMap &opts)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.GetBlockDevicesIdList
    return parent()->GetBlockDevicesIdList(opts);
}

QStringList DeviceManagerAdaptor::GetProtocolDevicesIdList()
{
    // handle method call com.deepin.filemanager.service.DeviceManager.GetProtocolDevicesIdList
    return parent()->GetProtocolDevicesIdList();
}

void DeviceManagerAdaptor::GhostBlockDevMounted(const QString &deviceId, const QString &mountPoint)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.GhostBlockDevMounted
    parent()->GhostBlockDevMounted(deviceId, mountPoint);
}

bool DeviceManagerAdaptor::IsMonotorWorking()
{
    // handle method call com.deepin.filemanager.service.DeviceManager.IsMonotorWorking
    return parent()->IsMonotorWorking();
}

void DeviceManagerAdaptor::LockBlockDevice(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.LockBlockDevice
    parent()->LockBlockDevice(id);
}

QString DeviceManagerAdaptor::MountBlockDevice(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.MountBlockDevice
    return parent()->MountBlockDevice(id);
}

QString DeviceManagerAdaptor::MountProtocolDevice(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.MountProtocolDevice
    return parent()->MountProtocolDevice(id);
}

void DeviceManagerAdaptor::PoweroffBlockDevice(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.PoweroffBlockDevice
    parent()->PoweroffBlockDevice(id);
}

QVariantMap DeviceManagerAdaptor::QueryBlockDeviceInfo(const QString &id, bool detail)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.QueryBlockDeviceInfo
    return parent()->QueryBlockDeviceInfo(id, detail);
}

QVariantMap DeviceManagerAdaptor::QueryProtocolDeviceInfo(const QString &id, bool detail)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.QueryProtocolDeviceInfo
    return parent()->QueryProtocolDeviceInfo(id, detail);
}

bool DeviceManagerAdaptor::RenameBlockDevice(const QString &id, const QString &newName)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.RenameBlockDevice
    return parent()->RenameBlockDevice(id, newName);
}

void DeviceManagerAdaptor::SafelyRemoveBlockDevice(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.SafelyRemoveBlockDevice
    parent()->SafelyRemoveBlockDevice(id);
}

QString DeviceManagerAdaptor::UnlockBlockDevice(const QString &id, const QString &passwd)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.UnlockBlockDevice
    return parent()->UnlockBlockDevice(id, passwd);
}

void DeviceManagerAdaptor::UnmountBlockDevice(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.UnmountBlockDevice
    parent()->UnmountBlockDevice(id);
}

void DeviceManagerAdaptor::UnmountBlockDeviceForced(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.UnmountBlockDeviceForced
    parent()->UnmountBlockDeviceForced(id);
}

void DeviceManagerAdaptor::UnmountProtocolDevice(const QString &id)
{
    // handle method call com.deepin.filemanager.service.DeviceManager.UnmountProtocolDevice
    parent()->UnmountProtocolDevice(id);
}


/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c Tagmanagerdaemoninterface -p ../interface/tagmanagerdaemon_interface tagmanagerdaemon.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef TAGMANAGERDAEMON_INTERFACE_H
#define TAGMANAGERDAEMON_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.filemanager.daemon.TagManagerDaemon
 */
class Tagmanagerdaemoninterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.filemanager.daemon.TagManagerDaemon"; }

public:
    Tagmanagerdaemoninterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~Tagmanagerdaemoninterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusVariant> disposeClientData(const QVariantMap &filesAndTags, const QString &userName, qulonglong type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filesAndTags) << QVariant::fromValue(userName) << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QStringLiteral("disposeClientData"), argumentList);
    }

    inline QDBusPendingReply<> lockBackend()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("lockBackend"), argumentList);
    }

    inline QDBusPendingReply<> unlockBackend()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("unlockBackend"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void backendIsBlocked();
};

namespace com {
  namespace deepin {
    namespace filemanager {
      namespace daemon {
        typedef ::Tagmanagerdaemoninterface TagManagerDaemon;
      }
    }
  }
}
#endif

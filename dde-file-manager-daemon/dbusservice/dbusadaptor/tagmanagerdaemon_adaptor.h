/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i tag/tagmanagerdaemon.h -c TagManagerDaemonAdaptor -l TagManagerDaemon -a dbusadaptor/tagmanagerdaemon_adaptor tagmanagerdaemon.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef TAGMANAGERDAEMON_ADAPTOR_H
#define TAGMANAGERDAEMON_ADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "tag/tagmanagerdaemon.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.filemanager.daemon.TagManagerDaemon
 */
class TagManagerDaemonAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.filemanager.daemon.TagManagerDaemon")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.filemanager.daemon.TagManagerDaemon\">\n"
"    <method name=\"disposeClientData\">\n"
"      <annotation value=\"QVariantMap\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"      <arg direction=\"in\" type=\"a{sv}\" name=\"filesAndTags\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"userName\"/>\n"
"      <arg direction=\"in\" type=\"t\" name=\"type\"/>\n"
"      <arg direction=\"out\" type=\"v\" name=\"result\"/>\n"
"    </method>\n"
"    <signal name=\"backendIsBlocked\"/>\n"
"    <method name=\"lockBackend\"/>\n"
"    <method name=\"unlockBackend\"/>\n"
"  </interface>\n"
        "")
public:
    TagManagerDaemonAdaptor(TagManagerDaemon *parent);
    virtual ~TagManagerDaemonAdaptor();

    inline TagManagerDaemon *parent() const
    { return static_cast<TagManagerDaemon *>(QObject::parent()); }

public: // PROPERTIES
public Q_SLOTS: // METHODS
    QDBusVariant disposeClientData(const QVariantMap &filesAndTags, const QString &userName, qulonglong type);
    void lockBackend();
    void unlockBackend();
Q_SIGNALS: // SIGNALS
    void backendIsBlocked();
};

#endif

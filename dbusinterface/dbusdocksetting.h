/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusDockSetting -p dbusdocksetting dde.dock.DockSetting.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSDOCKSETTING_H_1435836997
#define DBUSDOCKSETTING_H_1435836997

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface dde.dock.DockSetting
 */
class DBusDockSetting: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticServerPath()
    { return "com.deepin.daemon.Dock"; }
    static inline const char *staticInterfacePath()
    { return "/dde/dock/DockSetting"; }
    static inline const char *staticInterfaceName()
    { return "dde.dock.DockSetting"; }

public:
    DBusDockSetting(QObject *parent = 0);

    ~DBusDockSetting();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int> GetClockType()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetClockType"), argumentList);
    }

    inline QDBusPendingReply<bool> GetDisplayDate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetDisplayDate"), argumentList);
    }

    inline QDBusPendingReply<int> GetDisplayMode()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetDisplayMode"), argumentList);
    }

    inline QDBusPendingReply<bool> GetDisplayWeek()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetDisplayWeek"), argumentList);
    }

    inline QDBusPendingReply<int> GetHideMode()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetHideMode"), argumentList);
    }

    inline QDBusPendingReply<bool> SetClockType(int in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetClockType"), argumentList);
    }

    inline QDBusPendingReply<bool> SetDisplayDate(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDisplayDate"), argumentList);
    }

    inline QDBusPendingReply<bool> SetDisplayMode(int in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDisplayMode"), argumentList);
    }

    inline QDBusPendingReply<bool> SetDisplayWeek(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDisplayWeek"), argumentList);
    }

    inline QDBusPendingReply<bool> SetHideMode(int in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetHideMode"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ClockTypeChanged(int in0);
    void DisplayDateChanged(bool in0);
    void DisplayModeChanged(int in0);
    void DisplayWeekChanged(bool in0);
    void HideModeChanged(int in0);
};

namespace dde {
  namespace dock {
    typedef ::DBusDockSetting DockSetting;
  }
}
#endif
